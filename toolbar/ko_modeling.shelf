<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="ko_modeling" label="KoModeling">
    <memberTool name="connect"/>
    <memberTool name="remove_visibility_ops"/>
    <memberTool name="toggle_highlight"/>
    <memberTool name="rename_pwd"/>
    <memberTool name="create_null"/>
    <memberTool name="ko_normal"/>
    <memberTool name="ko_extract"/>
    <memberTool name="geometry_grouphighlight"/>
    <memberTool name="sop_xform"/>
    <memberTool name="isolate"/>
    <memberTool name="sop_splitpoints"/>
    <memberTool name="ko_fuse"/>
    <memberTool name="retopo"/>
    <memberTool name="ko_edit"/>
    <memberTool name="ko_edit_mirror"/>
  </toolshelf>

  <tool name="connect" label="Connect" icon="hicon:/SVGIcons.index?SOP_add.svg">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import ko_modeling

ko_modeling.connect(kwargs)]]></script>
  </tool>

  <tool name="remove_visibility_ops" label="Remove Visibility Ops" icon="hicon:/SVGIcons.index?SOP_visibility.svg">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import hou
print(hou.pwd())
print(kwargs)

if kwargs['pane'] and kwargs['pane'].type() == hou.paneTabType.SceneViewer:
    viewer = kwargs['pane']
else:
    viewer = hou.ui.paneTabOfType(hou.paneTabType.SceneViewer)

for child in viewer.pwd().allSubChildren(top_down=False, recurse_in_locked_nodes=False):
    if child.type() == hou.nodeType(hou.sopNodeTypeCategory(), "visibility"):
        child.destroy()]]></script>
  </tool>

  <tool name="toggle_highlight" label="Toggle Highlight" icon="VIEW_show_group_colors">
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import ko_ui

editor = ko_ui.oneNetworkEditor(kwargs)
network_path = editor.pwd()
node = network_path.displayNode()

is_set = node.isGenericFlagSet(hou.nodeFlag.Highlight)
to_set = not is_set
node.setGenericFlag(hou.nodeFlag.Highlight, to_set)

editor.flashMessage("SCENEGRAPH_active_on" if to_set else "SCENEGRAPH_loaded_off",
    f"Highlight flag " + ("on" if to_set else "off") + f" for {node.name()}",
    1)]]></script>
  </tool>

  <tool name="rename_pwd" label="Rename PWD" icon="hicon:/SVGIcons.index?BUTTONS_label.svg">
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import ko_ui


def rename_pwd(editor):
    current_network = editor.pwd()

    current_name = current_network.name()
        
    # Prompt the user for a new name
    index, new_name = hou.ui.readInput("Rename Network", 
                                buttons=("Rename", "Cancel"),
                                initial_contents=current_name, 
                                title=f"Rename '{current_name}'",
                                close_choice=1)
    
    if index == 1:
        return

    # Check if the user canceled the operation
    if not new_name:
        print("Rename operation canceled.")
        return

    # Attempt to rename the network
    try:
        current_network.setName(new_name)
        editor.flashMessage("BUTTONS_label", f"Renamed {current_name} to {new_name}", 1)
    except hou.OperationFailed as e:
        print(f"Failed to rename network: {str(e)}")

editor = ko_ui.oneNetworkEditor(kwargs)
rename_pwd(editor)]]></script>
  </tool>

  <tool name="create_null" label="Create Null" icon="hicon:/SVGIcons.index?COMMON_null.svg">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

import os

def createNullFor(editor, name):
    node = editor.currentNode()
    null = node.parent().createNode('null', name)
    null.setInput(0, node)
    null.moveToGoodPosition()
    null.setDisplayFlag(True)
    null.setRenderFlag(True)
    editor.setCurrentNode(null)

editor = kwargs["pane"]
if editor and editor.type() == hou.paneTabType.NetworkEditor:
    choice, name = hou.ui.readInput("Name: ", buttons=("OK", "Cancel"), close_choice=1, initial_contents="null")
    if choice == 0:
        createNullFor(editor, name)
else:
    raise hou.Error("This tool cannot run in the current pane")
]]></script>
  </tool>

  <tool name="ko_normal" label="KoNormal" icon="hicon:/SVGIcons.index?SOP_normal.svg">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'normal')]]></script>
  </tool>

  <tool name="ko_extract" label="KoExtract" icon="SHELF_extract_object">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() != hou.paneTabType.SceneViewer:
    raise hou.Error("This tool cannot run in the current pane")

scene_viewer = toolutils.sceneViewer()
nodetypename = "delete"

# Obtain a geometry selection
geo_types = (hou.geometryType.Primitives, )
selection = scene_viewer.selectGeometry(
                "Select the primitives to extract and press Enter to complete",
                geometry_types = geo_types,
                allow_obj_sel = True)
# The following will raise an exception if nothing was selected.
if len(selection.nodes()) == 0:
    raise hou.Error("Nothing was selected.")


choice, name = hou.ui.readInput("Extract:", 
                            buttons=("Sibling", "/obj", "Stashed sibling", "Stashed /obj", "Cancel"),
                            initial_contents = "extract_object1",
                            close_choice=4)
stashed = choice in (2, 3)
obj_new = choice in (1, 3)

# Create a new SOP container with the merged geometry
if obj_new:
    container = soptoolutils.createSopNodeContainer(scene_viewer, name)
else:
    container = scene_viewer.pwd()

merge_sop = selection.mergedNode(container, nodetypename, True, True)
if merge_sop == selection.nodes()[0]:
    merge_sop = container.createNode("object_merge")
    merge_sop.parm("objpath1").set(merge_sop.relativePathTo(selection.nodes()[0]))
    merge_sop.parm("group1").set(selection.selectionStrings()[0])
merge_sop.setName(name, True)

# Turn back on the display flag for merged nodes
for sop in selection.nodes():
    sop.parent().setDisplayFlag(True)


# Change our viewer to the new object
scene_viewer.setPwd(merge_sop.parent())
merge_sop.setDisplayFlag(True)
merge_sop.setRenderFlag(True)
merge_sop.setHighlightFlag(True)
merge_sop.setCurrent(True, True)
merge_sop.moveToGoodPosition(move_inputs=False)

if stashed:
    stash_node = container.createNode("stash")
    stash_node.setInput(0, merge_sop)
    stash_node.parm("stash").pressButton()
    stash_node.setDisplayFlag(True)
    stash_node.setRenderFlag(True)
    stash_node.setCurrent(True, True)
    stash_node.moveToGoodPosition(move_inputs=False)

toolutils.homeToSelectionNetworkEditorsFor(merge_sop)
# scene_viewer.enterCurrentNodeState()
]]></script>
  </tool>

  <tool name="isolate" label="Isolate" icon="H:/Painting/Assets_2D/Houdini-Icons/KO/isolate.svg">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils

kwargs['parms'] = {
    'negate': True
}
node = soptoolutils.genericTool(kwargs, 'blast')
node.setName("isolate", unique_name=True)]]></script>
  </tool>

  <tool name="ko_fuse" label="KoFuse" icon="H:/Painting/Assets_2D/Houdini-Icons/SOP/fuse.svg">
    <helpText><![CDATA[= KoFuse =

"""Similar to built-in Fuse but not limited by distance"""]]></helpText>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
kwargs['parms'] = { 'consolidatesnappedpoints': True }
node = soptoolutils.genericTool(kwargs, 'fuse::2.0')
node.parm("usetol3d").set(False)]]></script>
  </tool>

  <tool name="retopo" label="Retopo" icon="H:/Painting/Assets_2D/Houdini-Icons/KO/retopo.svg">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

sop = None
pane = kwargs['pane']
node = pane.currentNode()
new_node = soptoolutils.genericTool(kwargs, 'topobuild', 'retopo')

new_node.setInput(1, node)]]></script>
  </tool>
</shelfDocument>
