<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="ko_modeling" label="KoModeling">
    <memberTool name="connect"/>
    <memberTool name="remove_visibility_ops"/>
    <memberTool name="toggle_highlight"/>
  </toolshelf>

  <tool name="connect" label="Connect" icon="hicon:/SVGIcons.index?SOP_add.svg">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import ko_modeling

ko_modeling.connect(kwargs)]]></script>
  </tool>

  <tool name="remove_visibility_ops" label="Remove Visibility Ops" icon="hicon:/SVGIcons.index?SOP_visibility.svg">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import hou
print(hou.pwd())
print(kwargs)

if kwargs['pane'] and kwargs['pane'].type() == hou.paneTabType.SceneViewer:
    viewer = kwargs['pane']
else:
    viewer = hou.ui.paneTabOfType(hou.paneTabType.SceneViewer)

for child in viewer.pwd().allSubChildren(top_down=False, recurse_in_locked_nodes=False):
    if child.type() == hou.nodeType(hou.sopNodeTypeCategory(), "visibility"):
        child.destroy()]]></script>
  </tool>

  <tool name="toggle_highlight" label="Toggle Highlight" icon="VIEW_show_group_colors">
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import ko_ui

editor = ko_ui.oneNetworkEditor(kwargs)
network_path = editor.pwd()
node = network_path.displayNode()

is_set = node.isGenericFlagSet(hou.nodeFlag.Highlight)
to_set = not is_set
node.setGenericFlag(hou.nodeFlag.Highlight, to_set)

editor.flashMessage("SCENEGRAPH_active_on" if to_set else "SCENEGRAPH_loaded_off",
    f"Highlight flag " + ("on" if to_set else "off") + f" for {node.name()}",
    1)]]></script>
  </tool>
</shelfDocument>
