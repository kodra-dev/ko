<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <shelfSet name="kodra" label="Kodra">
    <memberToolshelf name="dev"/>
    <memberToolshelf name="ko_modeling"/>
  </shelfSet>

  <toolshelf name="dev" label="Dev">
    <memberTool name="reload_ko"/>
    <memberTool name="recook_python"/>
    <memberTool name="open_in_explorer"/>
    <memberTool name="generic_cleartexcache"/>
    <memberTool name="cycle_update_mode"/>
    <memberTool name="reset_current_sim"/>
    <memberTool name="ko_stowbar"/>
  </toolshelf>

  <tool name="reload_ko" label="Reload Ko" icon="hicon:/SVGIcons.index?BUTTONS_reload.svg">
    <helpText><![CDATA[1]]></helpText>
    <script scriptType="python"><![CDATA[import ko_dev
ko_dev.reloadKoModules() ]]></script>
  </tool>

  <tool name="open_in_explorer" label="Open in Explorer" icon="hicon:/SVGIcons.index?COMMON_file.svg">
    <helpText><![CDATA[= Open in Explorer =

""" Open $HIP in Explorer (Ctrl: input any path) """]]></helpText>
    <script scriptType="python"><![CDATA[import ko_dev

ko_dev.openInExplorer(show_dialog=kwargs['ctrlclick'])]]></script>
  </tool>

  <tool name="recook_python" label="Recook Python" icon="MISC_python">
    <helpText><![CDATA[= Recook Python =

""" Drag it to a network editor to call on that editor. (Ctrl: show debug log) """]]></helpText>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[pane = kwargs['pane']
if not pane:
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
# if not pane or not isinstance(pane, hou.NetworkEditor):
#     raise Exception("This tool must be run from a Network Editor pane. (You can drag it onto the network editor)")

import ko_dev
ko_dev.reloadKoModules()

import ko_network_editor
ko_network_editor.recookUpmostPythonNodes(pane, debug_log=kwargs['ctrlclick'])]]></script>
    <keywordList>
      <keyword>drag</keyword>
    </keywordList>
  </tool>

  <tool name="cycle_update_mode" label="Cycle Update Mode" icon="hicon:/SVGIcons.index?BUTTONS_waiting.svg">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>ROP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>TOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[current = hou.updateModeSetting()

if current == hou.updateMode.AutoUpdate:
    hou.setUpdateMode(hou.updateMode.OnMouseUp)
elif current == hou.updateMode.OnMouseUp:
    hou.setUpdateMode(hou.updateMode.Manual)
else:
    hou.setUpdateMode(hou.updateMode.AutoUpdate)]]></script>
  </tool>

  <tool name="reset_current_sim" label="Reset Current Sim" icon="hicon:/SVGIcons.index?BUTTONS_resimulate.svg">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>ROP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>TOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[node = hou.currentDopNet()
ancestors = []
while node:
    ancestors.append(node)
    node = node.parent()

for n in reversed(ancestors):
    try:
        print(n)
        n.parm("resimulate").pressButton()
        print(n)
        break
    except:
        pass


]]></script>
  </tool>

  <tool name="generic_cleartexcache" label="Clear Texture Cache" icon="SHELF_clear_texture_cache">
    <helpURL>tool:cleartexcache</helpURL>
    <script scriptType="hscript"><![CDATA[texcache -c]]></script>
  </tool>

  <tool name="ko_stowbar" label="KoStowbar" icon="H:/Painting/Assets_2D/Houdini-Icons/KO/kostowbar.svg">
    <helpText><![CDATA["""Toggle stowbar, but keep 'Operation Controls' visible"""]]></helpText>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="cop_viewer">
      <contextNetType>COP2</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[b = hou.ui.hideAllMinimizedStowbars()
b = not b

for p in hou.ui.panes():
    p.setShowPaneTabs(not b)
for p in hou.ui.paneTabs():
    if p.type()!=hou.paneTabType.NetworkEditor:
        p.setShowNetworkControls(not b)

    if p.type()==hou.paneTabType.NetworkEditor:
        p.setPref('showmenu',['0','1'][not b])
    elif p.type()==hou.paneTabType.SceneViewer:
        p.showDisplayOptionsBar(not b)
        p.showOperationBar(True) # We always want operation controls
        p.showSelectionBar(not b)
        if p.includeColorCorrectionBar():
            p.showColorCorrectionBar(not b)
        if p.includeMemoryBar():
            p.showMemoryBar(not b)
hou.ui.curDesktop().shelfDock().show(not b)
hou.setPreference('showmenu.val',['0','1'][not b])
hou.ui.setHideAllMinimizedStowbars(b)
]]></script>
  </tool>
</shelfDocument>
